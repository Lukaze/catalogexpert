class DataLoader{constructor(progressCallback,statusCallback,statsCallback,hideLoaderCallback,showAppsCallback,catalogConfigs,appDefinitions,appEntitlements){this.catalogConfigs=catalogConfigs || new Map();this.appDefinitions=appDefinitions || new Map();this.appEntitlements=appEntitlements || new Map();this.loadedSources=0;this.totalSources=0;this.isLoading=false;this.urlCache=new Map();this.urlToAudienceGroups=new Map();this.updateBlockingLoader=progressCallback;this.showStatus=statusCallback;this.updateStats=statsCallback;this.hideBlockingLoader=hideLoaderCallback;this.showAllApps=showAppsCallback;}
async fetchUrlWithCache(url){if(this.urlCache.has(url)){return await this.urlCache.get(url);}
const fetchPromise=fetch(url,{method: 'GET',headers:{'Accept': 'application/json,text/plain,*/*','Accept-Language': 'en-US,en;q=0.9','Cache-Control': 'no-cache','Origin': 'https://teams.microsoft.com','Referer': 'https://teams.microsoft.com/','User-Agent': 'Mozilla/5.0(Windows NT 10.0;Win64;x64)AppleWebKit/537.36(KHTML,like Gecko)Chrome/120.0.0.0 Safari/537.36'
},mode: 'cors',credentials: 'omit'
}).then(response=>{if(response.ok){return response.json();} else{throw new Error(`HTTP ${response.status}: ${response.statusText}`);} }).then(data=>{this.loadedSources++;const progressPercent=Math.floor((this.loadedSources/this.totalSources)*30)+ 30;this.updateBlockingLoader(`📥 Loaded ${this.loadedSources}/${this.totalSources} data sources...`,progressPercent);return data;}).catch(error=>{this.loadedSources++;const progressPercent=Math.floor((this.loadedSources/this.totalSources)*30)+ 30;this.updateBlockingLoader(`⚠️ Error loading source ${this.loadedSources}/${this.totalSources}`,progressPercent);throw error;});this.urlCache.set(url,fetchPromise);return await fetchPromise;}
trackUrlForAudience(url,audienceGroup){if(!this.urlToAudienceGroups.has(url)){this.urlToAudienceGroups.set(url,new Set());}
this.urlToAudienceGroups.get(url).add(audienceGroup);}
async loadCatalogConfiguration(audienceGroup){try{let configUrl='https://config.edge.skype.com/config/v1/MicrosoftTeams/1.0.0.0?agents=MicrosoftTeamsAppCatalog';if(audienceGroup !=='general'){configUrl +=`&AudienceGroup=${audienceGroup}`;}
const configData=await this.fetchUrlWithCache(configUrl);if(configData && configData.MicrosoftTeamsAppCatalog){this.catalogConfigs.set(audienceGroup,configData);return configData;} else{console.warn(`⚠️ Invalid config structure for ${audienceGroup}`);throw new Error(`Invalid catalog configuration structure for ${audienceGroup}`);}
} catch(error){console.error(`❌ Failed to load catalog configuration for ${audienceGroup}:`,error);throw error;}
}
async loadAllCatalogConfigurations(){try{this.updateBlockingLoader('🔧 Connecting to Microsoft Teams catalog servers...',5);const configPromises=window.utils.AUDIENCE_GROUPS.map(audienceGroup=>
this.loadCatalogConfiguration(audienceGroup));const results=await Promise.allSettled(configPromises);const succeeded=results.filter(r=> r.status==='fulfilled').length;const failed=results.length-succeeded;if(succeeded===0){this.updateBlockingLoader('❌ Failed to connect to catalog servers',100);throw new Error('Failed to load any catalog configurations');}
this.updateBlockingLoader(`✅ Connected to ${succeeded} audience groups!${failed > 0 ? `(${failed} failed)` : ''}`,20);await this.loadAllCatalogData();} catch(error){this.updateBlockingLoader('❌ Failed to load Microsoft Teams catalog configurations. Please check your network connection and try again.',100);console.error('Error loading configurations:',error);}
}
async loadAllCatalogData(){const uniqueUrls=new Set();this.totalSources=0;this.loadedSources=0;this.updateBlockingLoader('🔍 Analyzing catalog data sources...',25);this.catalogConfigs.forEach((config,audienceGroup)=>{const catalogConfig=config.MicrosoftTeamsAppCatalog?.appCatalog;if(catalogConfig){const appDefinitionSources=[catalogConfig.storeAppDefinitions,catalogConfig.coreAppDefinitions,catalogConfig.preApprovedAppDefinitions,catalogConfig.overrideAppDefinitions];appDefinitionSources.forEach(sourceConfig=>{if(sourceConfig && sourceConfig.sources){sourceConfig.sources.forEach(url=>{uniqueUrls.add(url);this.trackUrlForAudience(url,audienceGroup);});}
});if(catalogConfig.preconfiguredAppEntitlements && catalogConfig.preconfiguredAppEntitlements.sources){catalogConfig.preconfiguredAppEntitlements.sources.forEach(url=>{uniqueUrls.add(url);this.trackUrlForAudience(url,audienceGroup);});}
}
});this.totalSources=uniqueUrls.size;this.updateBlockingLoader(`📦 Preparing to load ${this.totalSources} data sources...`,30);const appDefinitionPromises=[];let loadedCount=0;this.catalogConfigs.forEach((config,audienceGroup)=>{appDefinitionPromises.push(this.loadAppDefinitionsForAudience(audienceGroup,config).then(()=>{loadedCount++;this.updateBlockingLoader(`📱 Loaded app definitions for ${audienceGroup}(${loadedCount}/${this.catalogConfigs.size})`,30 + Math.floor(30*loadedCount/this.catalogConfigs.size));}));});await Promise.allSettled(appDefinitionPromises);this.updateBlockingLoader('🔐 App definitions loaded. Now loading entitlements...',65);const entitlementPromises=[];loadedCount=0;this.catalogConfigs.forEach((config,audienceGroup)=>{entitlementPromises.push(this.loadPreconfiguredEntitlementsForAudience(audienceGroup,config).then(()=>{loadedCount++;this.updateBlockingLoader(`🔐 Loaded entitlements for ${audienceGroup}(${loadedCount}/${this.catalogConfigs.size})`,65 + Math.floor(25*loadedCount/this.catalogConfigs.size));}));});await Promise.allSettled(entitlementPromises);this.updateBlockingLoader('⚡ Finalizing catalog data...',95);const totalPossibleRequests=Array.from(this.urlToAudienceGroups.values()).reduce((sum,audiences)=> sum + audiences.size,0);const savedRequests=totalPossibleRequests-this.totalSources;this.updateBlockingLoader(`🎉 All catalog data loaded! Cache saved ${savedRequests} requests.`,100);this.updateStatsDisplay();setTimeout(()=>{this.hideBlockingLoader();this.showAllApps();},600);}
async loadAppDefinitionsForAudience(audienceGroup,config){const catalogConfig=config.MicrosoftTeamsAppCatalog?.appCatalog;if(!catalogConfig)return;const appDefinitionSources=[{type: 'store',config: catalogConfig.storeAppDefinitions },{type: 'core',config: catalogConfig.coreAppDefinitions },{type: 'preApproved',config: catalogConfig.preApprovedAppDefinitions },{type: 'override',config: catalogConfig.overrideAppDefinitions }];for(const source of appDefinitionSources){if(source.config && source.config.sources){await this.loadAppDefinitions(source.config.sources,audienceGroup,source.type);}
}
}
async loadPreconfiguredEntitlementsForAudience(audienceGroup,config){const catalogConfig=config.MicrosoftTeamsAppCatalog?.appCatalog;if(!catalogConfig)return;if(catalogConfig.preconfiguredAppEntitlements && catalogConfig.preconfiguredAppEntitlements.sources){await this.loadAppPreconfiguredEntitlements(catalogConfig.preconfiguredAppEntitlements.sources,audienceGroup);}
}
async loadAppDefinitions(sources,audienceGroup,sourceType='store'){const loadPromises=sources.map(async(sourceUrl)=>{try{const appData=await this.fetchUrlWithCache(sourceUrl);if(appData.value && appData.value.appDefinitions){appData.value.appDefinitions.forEach(app=>{if(app.id){if(!this.appDefinitions.has(app.id)){this.appDefinitions.set(app.id,new Map());}
const appWithMeta={...app,sourceType,audienceGroup };this.appDefinitions.get(app.id).set(audienceGroup,appWithMeta);}
});}
} catch(error){console.error(`Error loading ${sourceType} app definitions from`,sourceUrl,'for audience',audienceGroup,error);}
});await Promise.all(loadPromises);}
async loadAppPreconfiguredEntitlements(sources,audienceGroup){const loadPromises=sources.map(async(sourceUrl)=>{try{const preconfiguredEntitlementData=await this.fetchUrlWithCache(sourceUrl);if(preconfiguredEntitlementData.value && preconfiguredEntitlementData.value.appEntitlements){Object.keys(preconfiguredEntitlementData.value.appEntitlements).forEach(scope=>{const scopeEntitlements=preconfiguredEntitlementData.value.appEntitlements[scope];Object.keys(scopeEntitlements).forEach(context=>{const entitlementArray=scopeEntitlements[context];if(Array.isArray(entitlementArray)){entitlementArray.forEach((entitlement,index)=>{if(entitlement){let appId=null;if(entitlement.id){appId=entitlement.id;}
else if(entitlement.appId){appId=entitlement.appId;}
else{return;}
if(appId){if(this.appDefinitions.has(appId)&& this.appDefinitions.get(appId).has(audienceGroup)){if(!this.appEntitlements.has(appId)){this.appEntitlements.set(appId,new Map());}
const appEntitlementMap=this.appEntitlements.get(appId);const key=`${audienceGroup}.${scope}.${context}`;const entitlementWithAppId={...entitlement,appId };appEntitlementMap.set(key,entitlementWithAppId);}
}
}
});}
});});}
} catch(error){console.error('Error loading app entitlements from',sourceUrl,'for audience',audienceGroup,error);}
});await Promise.all(loadPromises);const totalEntitlementsForAudience=Array.from(this.appEntitlements.values()).reduce((count,appMap)=>{const audienceEntitlements=Array.from(appMap.keys()).filter(key=> key.startsWith(audienceGroup + '.'));return count + audienceEntitlements.length;},0);}
updateStatsDisplay(){const uniqueApps=new Set();this.appDefinitions.forEach((audienceMap,appId)=>{if(audienceMap.size > 0)uniqueApps.add(appId);});const uniquePreconfiguredEntitlements=new Set();this.appEntitlements.forEach((entitlementMap,appId)=>{if(entitlementMap.size > 0){uniquePreconfiguredEntitlements.add(appId);}
});document.getElementById('totalApps').textContent=uniqueApps.size;document.getElementById('loadedSources').textContent=this.loadedSources;document.getElementById('entitlementConfigs').textContent=uniquePreconfiguredEntitlements.size;document.getElementById('catalogStats').style.display='grid';}
getAppInfo(appId){const audienceMap=this.appDefinitions.get(appId);if(!audienceMap || audienceMap.size===0){return{name: window.utils.CONSTANTS.UNKNOWN_APP,developerName: window.utils.CONSTANTS.UNKNOWN_DEVELOPER };}
return audienceMap.values().next().value;}
getAppPreconfiguredEntitlements(appId){if(!this.appEntitlements.has(appId)){return{};}
const entitlementMap=this.appEntitlements.get(appId);const entitlementInfo={};entitlementMap.forEach((entitlement,key)=>{entitlementInfo[key]=entitlement;});return entitlementInfo;}
}
window.DataLoader=DataLoader;
